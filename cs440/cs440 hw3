1. 
- I didn't use reverse here because I don't think it's needed perhapse the question was supposed to be "suffix" instead of "prefix"
-- tail-recursive helper function:
Prelude> common_ind x y i = if (x !! i) == (y !! i) then (common_ind x y (i + 1)) else (i - 1)
Prelude> common x y = ( [x !! i | i <- [0..(common_ind x y 0)]] , [x !! i | i <- [(common_ind x y 0)..(length x - 1)]], [y !! i | i <- [(common_ind x y 0)..(length y - 1)]] )

Prelude> common [1,2,3,6,7,8,9] [1,2,3,4,5,6,7,8,9,10]
([1,2,3],[3,6,7,8,9],[3,4,5,6,7,8,9,10])


2. 

data List a = Node a (List a) | Nil deriving (Show, Eq)

listShow' Nil = ""
listShow' (Node v l) =  "," ++ (show v) ++ (listShow' l)
listShow Nil = "[]";
listShow (Node v l) = "[" ++ (show v) ++ (listShow' l) ++ "]"

3. 

data Tree a b = Leaf b | Node a (Tree a b) (Tree a b) deriving (Read, Show, Eq)

:{
-- Note: always True
isFull (Leaf a) = True
isFull (Node a l r) = (isFull l) && (isFull r)
:}


4. 
:{
parse (Leaf v) = v 
parse (Node a b c)
   | a == "+" = (parse b) + (parse c)
   | a == "-" = (parse b) - (parse c)
   | a == "*" = (parse b) * (parse c)
   | a == "/" = (parse b) / (parse c)
:}


5. 
