#!/bin/ys

# list:filter, list:sort not natively implemented yet


# removes elements where condition not satisfied
# <condition lambdcd a> <list> list:filter
{
	{ # run within temp scope
		$list swap ~ =
		$lam swap ~ =
		$ret () =
		{ # for each elem
			{ # if condition is true
				# add element to ret
				$ret $e ~ list:push
			} ($e) $lam @ if
		} $list $e foreach
		$ret ~
	} @
} "list:filter" define


# selection sorts list according to comparison lambda
# 	this is why the script is so slow
{
	{
		$list swap ~ =
		$lam swap ~ =
		{ # for each elem

			# select highest elem
			$m_ind 0 =

			# find next lowest elem
			{
				{
					$m_ind $g ~ =
				} ($list $m_ind ] ~, $list $g ] ~) $lam @ 0 > if
			} $i $list list:size range $g foreach

			# swap
			$temp $list $m_ind ] =
			$list $m_ind ] $list $i ] =
			$list $i ] $temp ~ =

		} 0 $list list:size range $i foreach
		$list ~
	} @
} "list:sort" define


# this lambda filters applicants
$bestApplicants {

	# lambda to attribute a score to the applicant
	$score {
		$app 4 ] num 2 *        # data structures importance factor of 2
		$app 5 ] num 1.5 * +    # software engineering importance factor 1.5
		$app 6 ] num 2   * +    # algorithms importance factor 2
		$app 7 ] num 0.5 * +    # computer organization importance factor .5
		$app 8 ] num +          # OSs importance factor 1
		$app 9 ] num +          # overall avg importance factor 1
			return
	} ($app) lam =


	$ret
		# remove apps who didnt make a 100 in intro class
		# and apps whos overall college average less than a 75
		{ $u 3 ] num 100 >= $u 9 ] num 75 >= && return } ($u) lam
			$apps ~ list:filter

	"removed weakest apps." println

		# sort by weighted score
		{
			($b) $score @
			($a) $score @ - return
		} ($a, $b) lam swap list:sort =

	"sorted applicants based on weighted score." println

	# top 20 move on
	$ret2 () =
	{
		$ret2 $ret $i ] ~ list:push
	} 0 20 range $i foreach
	"took top 20 applicants." println

	$ret2 ~ return

} ($apps) lambda =




# populate applicant list using file "input.txt"
$apps () =
{
	$apps $line "," split list:push
} "input.txt" file_get_contents "\n" split $line foreach

"loaded " $apps list:size + " applications." + println

# filter applicants list to find most relevant
$finalists ($apps) $bestApplicants @ =

# print out finalists
$finalists list:size " Finalists found:" + println
{
	$i 1 + ":\t" + $finalists $i ] + println
} 0 $finalists list:size range $i foreach


exit
